// https://github.com/syt123450/Gio.js/blob/master/LICENSE
var GIO = function(A) {
    "use strict";

    function C(A) {
        function C(C, I) {
            var r = A.earthSurfaceShader.lookupCanvas.getContext("2d");
            r.clearRect(0, 0, 256, 1);
            r.fillStyle = "rgb(0,0,0)", r.fillRect(0, 0, 1, 1), A.earthSurfaceShader.uniforms.outlineLevel.value = 0, A.earthSurfaceShader.uniforms.flag.value = 0, A.rotating.remove(A.visualizationMesh), A.earthSurfaceShader.lookupTexture.needsUpdate = !0, A.renderer.autoClear = !1, A.renderer.autoClearColor = !1, A.renderer.autoClearDepth = !1, A.renderer.autoClearStencil = !1, A.renderer.clear(), A.renderer.render(A.scene, A.camera);
            var o = A.renderer.context;
            o.preserveDrawingBuffer = !0;
            var v = C + A.renderer.context.canvas.width / 2,
                t = -I + A.renderer.context.canvas.height / 2;
            v = Math.floor(v), t = Math.floor(t);
            var e = new Uint8Array(4);
            return o.readPixels(v, t, 1, 1, o.RGBA, o.UNSIGNED_BYTE, e), A.renderer.autoClear = !0, A.renderer.autoClearColor = !0, A.renderer.autoClearDepth = !0, A.renderer.autoClearStencil = !0, o.preserveDrawingBuffer = !1, A.earthSurfaceShader.uniforms.outlineLevel.value = 1, A.earthSurfaceShader.uniforms.flag.value = 1, A.rotating.add(A.visualizationMesh), g(A.selectedCountry.colorCode), e[0]
        }

        function g(C) {
            var g, r = A.earthSurfaceShader.lookupCanvas.getContext("2d");
            if (r.clearRect(0, 0, 256, 1), r.fillStyle = I(G.transformBrightness(A.configure.brightness.ocean, v, t)), r.fillRect(0, 0, 1, 1), A.configure.control.lightenMentioned) { r.fillStyle = I(G.transformBrightness(A.configure.brightness.mentioned, e, f)); for (g in A.mentionedCountryCodes) r.fillRect(A.mentionedCountryCodes[g], 0, 1, 1) }
            r.fillStyle = I(G.transformBrightness(A.configure.brightness.related, n, a));
            for (g in A.relatedCountries) r.fillRect(A.relatedCountries[g].colorCode, 0, 1, 1);
            r.fillStyle = I(o), r.fillRect(C, 0, 1, 1), A.earthSurfaceShader.lookupTexture.needsUpdate = !0
        }

        function I(A) { return "rgb(" + A + "," + A + "," + A + ")" }

        function r() { A.earthSurfaceShader.update(), g(A.selectedCountry.colorCode) }
        var o = 255,
            v = 0,
            t = 20,
            e = 50,
            f = 100,
            n = 100,
            a = 150;
        return { getPickColor: C, highlightCountry: g, update: r }
    }

    function g(A) {
        function C() { void 0 !== e && void 0 !== f ? (v += .012 * (e - r), t += .012 * (f - o), Math.abs(e - r) < .1 && Math.abs(f - o) < .1 && (e = void 0, f = void 0)) : D && (t = l * V), r += v, o += t, v *= .98, t *= .98, (a || void 0 !== e) && (v *= .6, t *= .6), r < -n && (r = -n, v *= -.95), r > n && (r = n, v *= -.95), A.rotating.rotation.x = r, A.rotating.rotation.y = o }

        function g() {
            var C = A.selectedCountry;
            e = C.lat * Math.PI / 180;
            for (var g = -(C.lon - 9) * Math.PI / 180, I = 0;;) {
                var r = g - 2 * Math.PI * I,
                    o = g + 2 * Math.PI * I;
                if (Math.abs(r - A.rotating.rotation.y) < Math.PI) { f = r; break }
                if (Math.abs(o - A.rotating.rotation.y) < Math.PI) { f = o; break }
                I++, f = G.wrap(g, -Math.PI, Math.PI)
            }
            v *= .6, t *= .6
        }

        function I() { D = A.configure.control.autoRotation, V = A.configure.control.rotationRatio }
        var r = 0,
            o = 0,
            v = 0,
            t = 0,
            e = void 0,
            f = void 0,
            n = 90 * Math.PI / 180,
            a = !1,
            l = .005,
            D = void 0,
            V = void 0;
        return { rotateToTargetCountry: g, update: C, updateRotationConfig: I, addRotateVY: function(A) { t += A }, addRotateVX: function(A) { v += A }, setDragging: function(A) { a = A }, isDragging: function() { return a }, clearRotateTargetX: function() { e = void 0 } }
    }

    function I(A) {
        function C(C) {
            if (A.camera.position.z + 100 * C <= g || A.camera.position.z + 100 * C >= I);
            else {
                var r = G.constrain(A.camera.position.z + 100 * C, g, I);
                A.camera.position.set(0, 0, r)
            }
        }
        var g = 800,
            I = 2e3;
        return { handleMWheel: C }
    }

    function r(A) {
        function C() {
            var C = new THREE.Color(A.configure.color.halo);
            g.x = C.r, g.y = C.g, g.z = C.b
        }
        var g = new THREE.Vector3;
        return C(), { uniforms: { haloColor: { type: "v3", value: g } }, vertexShader: ["varying vec3 vNormal;", "void main() {", "vNormal = normalize( normalMatrix * normal );", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );", "}"].join("\n"), fragmentShader: ["varying vec3 vNormal;", "uniform vec3 haloColor;", "void main() {", "float intensity = pow( 0.5 - dot( vNormal, vec3( 0, 0, 1.0 ) ), 16.0 );", "gl_FragColor = vec4( haloColor, 1.0 ) * intensity;", "}"].join("\n"), update: C }
    }

    function o(A) {
        function C() { g(A.configure.color.surface), I(null === A.configure.color.selected ? A.configure.color.surface : A.configure.color.selected) }

        function g(A) { null !== A && (A = G.formatColor(A), t.setHex(A), e.x = t.r, e.y = t.g, e.z = t.b) }

        function I(A) { null !== A && (A = G.formatColor(A), t.setHex(A), f.x = t.r, f.y = t.g, f.z = t.b) }

        function r() { C() }
        var o, v, t = new THREE.Color,
            e = new THREE.Vector3,
            f = new THREE.Vector3;
        return {
            uniforms: function() {
                C();
                var A = {},
                    g = (new THREE.TextureLoader).load(x);
                A.mapIndex = { type: "t", value: g }, A.mapIndex.value.magFilter = THREE.NearestFilter, A.mapIndex.value.minFilter = THREE.NearestFilter, o = document.createElement("canvas"), o.width = 256, o.height = 1, v = new THREE.Texture(o), v.magFilter = THREE.NearestFilter, v.minFilter = THREE.NearestFilter, v.needsUpdate = !0, A.lookup = { type: "t", value: v };
                var I = (new THREE.TextureLoader).load(Z);
                return A.outline = { type: "t", value: I }, A.outlineLevel = { type: "f", value: 1 }, A.surfaceColor = { type: "v3", value: e }, A.flag = { type: "f", value: 1 }, A.selectedColor = { type: "v3", value: f }, A
            }(),
            vertexShader: ["varying vec2 vUv;", "void main() {", "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0);", "vUv = uv;", "}"].join("\n"),
            fragmentShader: ["uniform sampler2D mapIndex;", "uniform sampler2D lookup;", "uniform sampler2D outline;", "uniform float outlineLevel;", "varying vec2 vUv;", "uniform vec3 surfaceColor;", "uniform float flag;", "uniform vec3 selectedColor;", "void main() {", "vec4 mapColor = texture2D( mapIndex, vUv );", "float indexedColor = mapColor.x;", "vec2 lookupUV = vec2( indexedColor, 0. );", "vec4 lookupColor = texture2D( lookup, lookupUV );", "float mask = lookupColor.x + (1.-outlineLevel) * indexedColor;", "mask = clamp(mask,0.,1.);", "float outlineColor = texture2D( outline, vUv ).x * outlineLevel;", "float diffuse = mask + outlineColor;", "vec3 earthColor = vec3(0.0, 0.0, 0.0);", "earthColor.x = flag * surfaceColor.x * diffuse + (1.0 - flag) * diffuse;", "earthColor.y = flag * surfaceColor.y * diffuse + (1.0 - flag) * diffuse;", "earthColor.z = flag * surfaceColor.z * diffuse + (1.0 - flag) * diffuse;", "if (lookupColor.x > 0.9) {", "earthColor = selectedColor * diffuse;", "}", "gl_FragColor = vec4( earthColor, 1.  );", "}"].join("\n"),
            lookupCanvas: o,
            lookupTexture: v,
            update: r
        }
    }

    function v() { var A = (new THREE.TextureLoader).load(j); return { uniforms: { amplitude: { type: "f", value: 1 }, color: { type: "c", value: new THREE.Color(16777215) }, texture: { type: "t", value: A } }, vertexShader: ["uniform float amplitude;", "attribute float size;", "attribute vec3 customColor;", "varying vec3 vColor;", "void main() {", "vColor = customColor;", "vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", "gl_PointSize = size;", "gl_Position = projectionMatrix * mvPosition;", "}"].join("\n"), fragmentShader: ["uniform vec3 color;", "uniform sampler2D texture;", "varying vec3 vColor;", "void main() {", "gl_FragColor = vec4( color * vColor, 1.0 );", "gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );", "}"].join("\n") } }

    function t(A) {
        function C() {
            A.rotating.remove(A.visualizationMesh), A.visualizationMesh = new THREE.Object3D;
            var C = J.createSplineSystem(A);
            A.visualizationMesh.add(C), A.rotating.add(A.visualizationMesh)
        }
        return { update: C }
    }

    function e(A) {
        function C(A) { g(A), I() }

        function g(C) { A.selectedCountry = Y[y[C]], A.visSystemHandler.update(), A.surfaceHandler.highlightCountry(C), A.rotationHandler.rotateToTargetCountry() }

        function I() {
            if (null !== o) {
                var C = G.transformCountryData(A.selectedCountry),
                    g = [];
                for (var I in A.relatedCountries) g.push(G.transformCountryData(A.relatedCountries[I]));
                o(C, g)
            }
        }

        function r(C, I) { var r = {}; "in" !== I && "out" !== I || (r.inOnly = A.configure.control.inOnly, r.outOnly = A.configure.control.outOnly, "in" === I ? (A.configure.control.inOnly = !0, A.configure.control.outOnly = !1) : (A.configure.control.inOnly = !1, A.configure.control.outOnly = !0)), void 0 !== Y[C] && g(Y[C].colorCode), "in" !== I && "out" !== I || (A.configure.control.inOnly = r.inOnly, A.configure.control.outOnly = r.outOnly) }
        var o = null;
        return { executeSwitch: C, switchFromAPI: r, setCountryPickCallBack: function(A) { o = A } }
    }

    function f(A) {
        function C() { A.camera.aspect = A.container.clientWidth / A.container.clientHeight, A.camera.updateProjectionMatrix(), A.renderer.setSize(A.container.clientWidth, A.container.clientHeight), A.visSystemHandler.update() }
        return { resizeScene: C }
    }

    function n() {
        function A(A) { D = a, V = l, a = A.clientX - .5 * n.container.clientWidth - G.getElementViewLeft(n.container), l = A.clientY - .5 * n.container.clientHeight - G.getElementViewTop(n.container), n.rotationHandler.isDragging() && (n.rotationHandler.addRotateVY((a - D) / 2 * Math.PI / 180 * .3), n.rotationHandler.addRotateVX((l - V) / 2 * Math.PI / 180 * .3)) }

        function C(A) {-1 === A.target.className.indexOf("noMapDrag") && (n.rotationHandler.setDragging(!0), P = a, q = l, n.rotationHandler.clearRotateTargetX()) }

        function g(A) { n.rotationHandler.setDragging(!1) }

        function I(A) {
            var C = 0;
            A.wheelDelta ? C = A.wheelDelta / 120 : A.detail && (C = -A.detail / 3), C && n.wheelHandler.handleMWheel(C), A.returnValue = !1
        }

        function r(A) { n.resizeHandler.resizeScene() }

        function o(A) {
            if (!(Math.abs(P - a) > 3 || Math.abs(q - l) > 3)) {
                Q.x = (A.clientX - G.getElementViewLeft(n.container)) / n.container.clientWidth * 2 - 1, Q.y = -(A.clientY - G.getElementViewTop(n.container)) / n.container.clientHeight * 2 + 1, B.setFromCamera(Q, n.camera);
                if (0 !== B.intersectObjects(n.scene.children, !0).length) {
                    var C = n.surfaceHandler.getPickColor(a, l);
                    void 0 !== y[C] && 0 !== C && (n.configure.control.disableUnmentioned && -1 !== n.mentionedCountryCodes.indexOf(C) || !n.configure.control.disableUnmentioned) && n.switchCountryHandler.executeSwitch(C)
                }
            }
        }

        function v(A) {-1 === A.target.className.indexOf("noMapDrag") && (n.rotationHandler.setDragging(!0), P = a, q = l, n.rotationHandler.clearRotateTargetX()) }

        function t(A) { n.rotationHandler.setDragging(!1) }

        function e(A) { D = a, V = l, a = A.touches[0].clientX - .5 * n.container.clientWidth - G.getElementViewLeft(n.container), l = A.touches[0].clientY - .5 * n.container.clientHeight - G.getElementViewTop(n.container), n.rotationHandler.isDragging() && (n.rotationHandler.addRotateVY((a - D) / 2 * Math.PI / 180 * .3), n.rotationHandler.addRotateVX((l - V) / 2 * Math.PI / 180 * .3)) }

        function f(f) { n = f, n.renderer.domElement.addEventListener("mousemove", A, !0), n.renderer.domElement.addEventListener("mousedown", C, !0), n.renderer.domElement.addEventListener("mouseup", g, !1), n.renderer.domElement.addEventListener("click", o, !0), n.renderer.domElement.addEventListener("mousewheel", I, !1), n.renderer.domElement.addEventListener("DOMMouseScroll", I, !1), n.renderer.domElement.ontouchstart = v, n.renderer.domElement.ontouchend = t, n.renderer.domElement.ontouchmove = e, window.addEventListener("resize", r, !1) }
        var n, a = 0,
            l = 0,
            D = 0,
            V = 0,
            P = 0,
            q = 0,
            Q = new THREE.Vector2,
            B = new THREE.Raycaster;
        return { bindEvent: f }
    }

    function a() { this.successor = null }

    function l() {}

    function D() {}

    function V() {}

    function P() {}

    function q() {}

    function Q() {}

    function B(A) {
        function C() { g(), I() }

        function g() { r(), o(), (new n).bindEvent(A), A.container.appendChild(A.renderer.domElement), v(), A.rotationHandler.updateRotationConfig(), A.initialized = !0 }

        function I() { A.configure.control.stats && A.stats.update(), A.rotationHandler.update(), A.renderer.clear(), A.renderer.render(A.scene, A.camera), A.rotating.traverse(function(A) { void 0 !== A.update && A.update() }), requestAnimationFrame(I) }

        function r() {
            A.renderer = J.createRenderer(A.container, A.configure.control.transparentBackground), A.camera = J.createCamera(A.container), A.lights = J.createLights(), A.sphere = J.createSphere(A), A.halo = J.createHalo(A), A.haloShader = A.halo.haloShader, A.earthSurfaceShader = A.sphere.earthSurfaceShader, A.scene = J.createScene(A), A.rotating = new THREE.Object3D, A.configure.control.stats && (A.stats = J.createStats(A.container), A.container.appendChild(A.stats.dom));
            for (var C in A.lights) A.scene.add(A.lights[C]);
            A.scene.add(A.rotating), A.rotating.add(A.sphere), A.scene.add(A.camera), !0 === A.configure.control.halo && A.scene.add(A.halo)
        }

        function o() { A.dataProcessor = k.getProcessorChain(), A.dataProcessor.process(A) }

        function v() { A.selectedCountry = Y[A.configure.control.initCountry], A.visSystemHandler.update(), A.rotationHandler.rotateToTargetCountry(), A.surfaceHandler.highlightCountry(A.selectedCountry.colorCode) }
        return { init: C }
    }

    function w() { return this.control = { stats: !1, disableUnmentioned: !1, lightenMentioned: !1, inOnly: !1, outOnly: !1, initCountry: "CN", halo: !0, transparentBackground: !1, autoRotation: !1, rotationRatio: 1 }, this.color = { surface: 16777215, selected: null, in: 1393810, out: 14497804, halo: 16777215, background: null }, this.brightness = { ocean: .5, mentioned: .5, related: .5 }, this }

    function d(A) {
        function C(C) {
            var g;
            if (C instanceof Object) {
                if (void 0 !== C.control)
                    for (g in C.control) A.configure.control[g] = C.control[g];
                if (void 0 !== C.color)
                    for (g in C.color) A.configure.color[g] = C.color[g];
                if (void 0 !== C.brightness)
                    for (g in C.brightness) A.configure.brightness[g] = C.brightness[g];
                if (void 0 !== C.resource)
                    for (g in C.resource) A.configure.resource[g] = C.resource[g]
            }
        }

        function g(A) { C(U.getStyle(A)) }

        function I() { C(A.constructorConfigure) }
        return { configureJSON: C, configureStyle: g, configureConstructor: I }
    }

    function u() {
        function A(A, C) { void 0 !== C && null !== C || (C = []), A.inputData = JSON.parse(JSON.stringify(C)) }
        return { load: A }
    }

    function c() {
        function A(A, g, I) {
            C.callback = I;
            var r = new XMLHttpRequest;
            r.open("GET", g, !0), r.onreadystatechange = function() {
                if (4 === r.readyState && 200 === r.status) {
                    var g = JSON.parse(r.responseText);
                    A.inputData = JSON.parse(JSON.stringify(g)), C.callback(g)
                }
            }, r.send(null)
        }
        this.callback = null;
        var C = this;
        return { load: A }
    }

    function E() {
        function A(A, g, I, o) { r.controller = A, r.url = g, r.callback = I, r.milliseconds = o, r.intervalHandle = setInterval(function() { C() }, r.milliseconds) }

        function C() { r.asyncLoader.load(r.controller, r.url, g), null !== r.callback && r.callback() }

        function g() {!0 === r.controller.initialized && (r.controller.dataProcessor.process(), r.controller.visSystemHandler.update(), r.controller.surfaceHandler.update()) }

        function I() { window.clearInterval(r.intervalHandle) }
        this.callback = null, this.milliseconds = 5e3, this.url = null, this.intervalHandle = null, this.controller = null, this.controller = null, this.asyncLoader = new c;
        var r = this;
        return { load: A, stop: I }
    }

    function X(A) {
        function C(C) { o.load(A, C) }

        function g(C, g) { t.load(A, C, g) }

        function I(C, g, I) { v.load(A, C, g, I) }

        function r() { v.stop() }
        var o = new u,
            v = new E,
            t = new c;
        return { loadJSON: C, loadAsync: g, liveLoad: I, stopLiveLoader: r }
    }

    function i(A) {
        function C() { A.halo = J.createHalo(A), A.haloShader = A.halo.haloShader, A.scene.add(A.halo) }

        function g() { A.scene.remove(A.halo), A.halo = null }

        function I() { A.haloShader.update() }
        return { create: C, remove: g, update: I }
    }

    function p(A) {
        function C() {
            for (var C = A.inputData, r = C.dataSetKeys, o = C.initDataSet, v = 0; v < r.length; v++) {
                var t = r[v];
                f[t] = [];
                var e = C[t];
                for (var n in e) { var a = e[n]; if (void 0 !== Y[a.e]) { var l = a.i.toUpperCase(); - 1 === S.names.indexOf(l) ? void 0 !== Y[a.i] && I(a, t) : g(a, t) } }
            }
            A.mentionedCountryCodes = f[o]
        }

        function g(A, C) {
            var g = Y[A.e].colorCode; - 1 === f[C].indexOf(g) && f[C].push(g);
            for (var I = A.i.toUpperCase(), r = S[I].countries, o = 0; o < r.length; o++) {
                var v = r[o],
                    t = Y[v];
                if (void 0 !== t) { var e = t.colorCode; - 1 === f[C].indexOf(e) && f[C].push(e) }
            }
        }

        function I(A, C) {
            var g = Y[A.i.toUpperCase()].colorCode,
                I = Y[A.e.toUpperCase()].colorCode; - 1 === f[C].indexOf(g) && f[C].push(g), -1 === f[C].indexOf(I) && f[C].push(I)
        }

        function r() {
            for (var C = A.inputData, g = C.dataSetKeys, I = 0; I < g.length; I++) {
                var r = g[I],
                    o = C[r];
                G.flattenCountryData(o, A.inputValueKey, 8e5, 5e6)
            }
        }

        function o() {
            for (var C = A.inputData, g = C.dataSetKeys, I = 0; I < g.length; I++) {
                var r = g[I],
                    o = C[r];
                for (var v in o) {
                    var t = o[v];
                    t.fakeData = t.v
                }
            }
            A.inputValueKey = "fakeData"
        }

        function v() {
            function C(A, C, g) {
                var I = A.center.clone(),
                    r = I.subVectors(I, C.center).length(),
                    o = A.center,
                    v = C.center,
                    e = o.clone().lerp(v, .5),
                    f = e.length();
                e.normalize(), e.multiplyScalar(f + .7 * r);
                var n = (new THREE.Vector3).subVectors(o, v);
                n.normalize();
                var a = .5 * r,
                    l = o,
                    D = e.clone().add(n.clone().multiplyScalar(a)),
                    V = e.clone().add(n.clone().multiplyScalar(-a)),
                    P = v,
                    q = new THREE.CubicBezierCurve3(o, l, D, e),
                    Q = new THREE.CubicBezierCurve3(e, V, P, v),
                    B = 2 * Math.floor(.02 * r + 6),
                    w = q.getPoints(B);
                w = w.splice(0, w.length - 1), w = w.concat(Q.getPoints(B)), w.push(t);
                var d = 3e-4 * g,
                    u = 10 + Math.sqrt(d);
                u = G.constrain(u, .1, 60);
                for (var c = new THREE.Geometry, E = 0; E < w.length; E++) c.vertices.push(w[E]);
                return c.size = u, c
            }
            for (var g = A.inputData, I = g.dataSetKeys, r = 0; r < I.length; r++) {
                var o = I[r],
                    v = g[o],
                    t = new THREE.Vector3(0, 0, 0);
                if (null === v) return;
                for (var e in v) {
                    var f = v[e],
                        n = f.i.toUpperCase(); - 1 === S.names.indexOf(n) ? function(A, g, I) {
                        var r = A.e.toUpperCase(),
                            o = A.i.toUpperCase();
                        if ("ZZ" === r || "ZZ" === o) return console.group("ZZ unknown country"), console.log("ZZ country code detected for current ;countries this will not be print on the globe"), console.log(r + ", " + o), console.groupEnd(), void delete g[I];
                        var v = Y[r],
                            t = Y[o];
                        if (null === v) throw r + " is not referenced as a country code! See the full list there : https://github.com/syt123450/giojs/blob/master/docs/en/Country_Code.md";
                        if (null === t) throw o + " is not referenced as a country code! See the full list there : https://github.com/syt123450/giojs/blob/master/docs/en/Country_Code.md";
                        A.lineGeometry = C(v, t, A.fakeData)
                    }(f, v, e) : function(A) {
                        var g = A.e.toUpperCase(),
                            I = A.i.toUpperCase(),
                            r = Y[g],
                            o = S[I];
                        A.lineGeometry = C(r, o, A.fakeData)
                    }(f)
                }
            }
        }

        function t() {
            var C = A.inputData.initDataSet;
            A.globalData = A.inputData[C]
        }

        function e(C) {-1 !== A.inputData.dataSetKeys.indexOf(C) && (A.mentionedCountryCodes = f[C], A.globalData = A.inputData[C], A.visSystemHandler.update(), A.surfaceHandler.update()) }
        var f = {};
        return { createMentionedCountries: C, flattenData: r, createFakeData: o, createGeometry: v, dumpData: t, switchDataSet: e }
    }

    function z(A) {
        function C() { var C = A.inputData; for (var r in C) { var o = C[r]; if (void 0 !== Y[o.e]) { var v = o.i.toUpperCase(); - 1 === S.names.indexOf(v) ? void 0 !== Y[o.i] && I(o) : g(o) } } }

        function g(C) {
            var g = Y[C.e].colorCode; - 1 === A.mentionedCountryCodes.indexOf(g) && A.mentionedCountryCodes.push(g);
            for (var I = C.i.toUpperCase(), r = S[I].countries, o = 0; o < r.length; o++) {
                var v = r[o],
                    t = Y[v];
                if (void 0 !== t) { var e = t.colorCode; - 1 === A.mentionedCountryCodes.indexOf(e) && A.mentionedCountryCodes.push(e) }
            }
        }

        function I(C) {
            var g = Y[C.i].colorCode,
                I = Y[C.e].colorCode; - 1 === A.mentionedCountryCodes.indexOf(g) && A.mentionedCountryCodes.push(g), -1 === A.mentionedCountryCodes.indexOf(I) && A.mentionedCountryCodes.push(I)
        }

        function r() {
            var C = A.inputData;
            G.flattenCountryData(C, A.inputValueKey, 8e5, 5e6)
        }

        function o() {
            var C = A.inputData;
            for (var g in C) {
                var I = C[g];
                I.fakeData = I.v
            }
            A.inputValueKey = "fakeData"
        }

        function v() {
            function C(A, C, I) {
                var r = A.center.clone(),
                    o = r.subVectors(r, C.center).length(),
                    v = A.center,
                    t = C.center,
                    e = v.clone().lerp(t, .5),
                    f = e.length();
                e.normalize(), e.multiplyScalar(f + .7 * o);
                var n = (new THREE.Vector3).subVectors(v, t);
                n.normalize();
                var a = .5 * o,
                    l = v,
                    D = e.clone().add(n.clone().multiplyScalar(a)),
                    V = e.clone().add(n.clone().multiplyScalar(-a)),
                    P = t,
                    q = new THREE.CubicBezierCurve3(v, l, D, e),
                    Q = new THREE.CubicBezierCurve3(e, V, P, t),
                    B = 2 * Math.floor(.02 * o + 6),
                    w = q.getPoints(B);
                w = w.splice(0, w.length - 1), w = w.concat(Q.getPoints(B)), w.push(g);
                var d = 3e-4 * I,
                    u = 10 + Math.sqrt(d);
                u = G.constrain(u, .1, 60);
                for (var c = new THREE.Geometry, E = 0; E < w.length; E++) c.vertices.push(w[E]);
                return c.size = u, c
            }
            var g = new THREE.Vector3(0, 0, 0);
            if (null !== A.inputData)
                for (var I in A.inputData) {
                    var r = A.inputData[I],
                        o = r.i.toUpperCase(); - 1 === S.names.indexOf(o) ? function(g) {
                        var r = g.e.toUpperCase(),
                            o = g.i.toUpperCase();
                        if ("ZZ" === r || "ZZ" === o) return console.group("ZZ unknown country"), console.log("ZZ country code detected for current ;countries this will not be print on the globe"), console.log(r + ", " + o), console.groupEnd(), void delete A.inputData[I];
                        var v = Y[r],
                            t = Y[o];
                        if (null === v) throw r + " is not referenced as a country code! See the full list there : https://github.com/syt123450/giojs/blob/master/docs/en/Country_Code.md";
                        if (null === t) throw o + " is not referenced as a country code! See the full list there : https://github.com/syt123450/giojs/blob/master/docs/en/Country_Code.md";
                        g.lineGeometry = C(v, t, g.fakeData)
                    }(r) : function(A) {
                        var g = A.e.toUpperCase(),
                            I = A.i.toUpperCase(),
                            r = Y[g],
                            o = S[I];
                        A.lineGeometry = C(r, o, A.fakeData)
                    }(r)
                }
        }

        function t() { A.globalData = A.inputData }
        return { createMentionedCountries: C, flattenData: r, createFakeData: o, createGeometry: v, dumpData: t }
    }

    function O(A, r) {
        this.container = A, this.constructorConfigure = r, this.configure = new w, this.dataGroupHandler = new p(this), this.singleDataHandler = new z(this), this.configureHandler = new d(this), this.rotationHandler = new g(this), this.surfaceHandler = new C(this), this.wheelHandler = new I(this), this.visSystemHandler = new t(this), this.switchCountryHandler = new e(this), this.resizeHandler = new f(this), this.initHandler = new B(this), this.dataHandler = new X(this), this.haloHandler = new i(this), this.dataProcessor = null, this.configureHandler.configureConstructor(), this.visualizationMesh = null, this.renderer = null, this.camera = null, this.lights = null, this.scene = null, this.rotating = null, this.sphere = null, this.earthSurfaceShader = null, this.halo = null, this.haloShader = null, this.inputData = [], this.globalData = [], this.dataGroup = !1, this.mentionedCountryCodes = [], this.relatedCountries = [], this.selectedCountry = null, this.stats = null, this.initialized = !1;
        var o = this;
        return {
            init: function() { return o.initHandler.init(), this },
            addData: function(A) { return o.dataHandler.loadJSON(A), !0 === o.initialized && (o.dataProcessor.process(o), o.visSystemHandler.update(), o.surfaceHandler.update()), this },
            clearData: function() { return o.inputData = [], o.globalData = [], !0 === o.initialized && (o.visSystemHandler.update(), o.surfaceHandler.update()), this },
            addDataAsync: function(A, C) { return o.dataHandler.loadAsync(A, C), this },
            addLiveData: function(A, C, g) { return o.dataHandler.liveLoad(A, C, g), this },
            setSurfaceColor: function(A) { return o.configure.color.surface = A, !0 === o.initialized && o.surfaceHandler.update(), this },
            setSelectedColor: function(A) { return o.configure.color.selected = A, !0 === o.initialized && o.surfaceHandler.update(), this },
            getScene: function() { return o.scene },
            setInitCountry: function(A) { return o.configure.control.initCountry = A, this },
            disableUnmentioned: function(A) { return o.configure.control.disableUnmentioned = A, this },
            lightenMentioned: function(A) { return o.configure.control.lightenMentioned = A, !0 === o.initialized && o.surfaceHandler.update(), this },
            setExportColor: function(A) { return o.configure.color.out = A, !0 === o.initialized && o.visSystemHandler.update(), this },
            setImportColor: function(A) { return o.configure.color.in = A, !0 === o.initialized && o.visSystemHandler.update(), this },
            getSelectedCountry: function() { return o.selectedCountry },
            getRelatedCountries: function() { return o.relatedCountries },
            onCountryPicked: function(A) { o.switchCountryHandler.setCountryPickCallBack(A) },
            enableStats: function() { return !1 === o.configure.control.stats && o.initialized && (null === o.stats && (o.stats = J.createStats(o.container)), o.container.appendChild(o.stats.dom)), o.configure.control.stats = !0, this },
            disableStats: function() { return !0 === o.configure.control.stats && null !== o.stats && o.container.removeChild(o.stats.dom), o.configure.control.stats = !1, this },
            getStatsObject: function() { return o.stats },
            getConfig: function() { return o.configure },
            adjustRelatedBrightness: function(A) { return o.configure.brightness.related = A, !0 === o.initialized && o.surfaceHandler.update(), this },
            adjustOceanBrightness: function(A) { return o.configure.brightness.ocean = A, !0 === o.initialized && o.surfaceHandler.update(), this },
            adjustMentionedBrightness: function(A) { return o.configure.brightness.mentioned = A, !0 === o.initialized && o.surfaceHandler.update(), this },
            setStyle: function(A) { return o.configureHandler.configureStyle(A), this },
            configure: function(A) { return o.configureHandler.configureJSON(A), !0 === o.initialized && (o.surfaceHandler.update(), o.visSystemHandler.update()), this },
            switchCountry: function(A, C) { return o.switchCountryHandler.switchFromAPI(A, C), this },
            showInOnly: function(A) { return !0 === A ? (o.configure.control.inOnly = !0, o.configure.control.outOnly = !1) : o.configure.control.inOnly = !1, !0 === o.initialized && o.visSystemHandler.update(), this },
            showOutOnly: function(A) { return !0 === A ? (o.configure.control.outOnly = !0, o.configure.control.inOnly = !1) : o.configure.control.outOnly = !1, !0 === o.initialized && o.visSystemHandler.update(), this },
            closeLiveLoader: function() { return o.dataHandler.stopLiveLoader(), this },
            update: function() { return !0 === o.initialized && (o.dataProcessor.process(o), o.visSystemHandler.update(), o.surfaceHandler.update()), this },
            setHaloColor: function(A) { return o.configure.color.halo = A, !0 === o.initialized && o.haloHandler.update(), this },
            removeHalo: function() { return o.configure.control.halo = !1, !0 === o.initialized && o.haloHandler.remove(), this },
            addHalo: function(A) { return o.configure.control.halo = !0, void 0 !== A && (o.configure.color.halo = A), !0 === o.initialized && (null !== o.halo ? o.haloHandler.update() : o.haloHandler.create()), this },
            setBackgroundColor: function(A) { return o.configure.color.background = A, !0 === o.initialized && (o.scene.background = new THREE.Color(A)), this },
            resizeUpdate: function() { return o.resizeHandler.resizeScene(), this },
            switchDataSet: function(A) { return o.dataGroup && o.dataGroupHandler.switchDataSet(A), this },
            setTransparentBackground: function(A) { return o.configure.control.transparentBackground = A, this },
            setAutoRotation: function(A, C) { o.configure.control.autoRotation = A, void 0 !== C && C >= 0 && (o.configure.control.rotationRatio = C), o.initialized && o.rotationHandler.updateRotationConfig() }
        }
    }
    var U = function() {
            function A(A) { return g[A] }

            function C(A, C) { g[A] = C }
            var g = {};
            return { getStyle: A, register: C }
        }(),
        W = function() { return { color: { surface: 36308, selected: 6327280, in: 16777215, out: 131822, halo: 946158, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        s = function() { return { color: { surface: 11554516, selected: 15762156, in: 16499435, out: 8187569, halo: 8187569, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        b = function() { return { color: { surface: 15210891, selected: 8517117, in: 15210891, out: 8517117, halo: 8517117, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        K = function() { return { color: { surface: 7874772, selected: 5405936, in: 13377678, out: 3221202, halo: 8023039, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        F = function() { return { color: { surface: 13510356, selected: 15265792, in: 16235311, out: 14767531, halo: 16361215, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        L = function() { return { color: { surface: 10249172, selected: 9518591, in: 9071316, out: 3442404, halo: 3918847, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        m = function() { return { color: { surface: 16711680, selected: 255, in: 1393810, out: 14497804, halo: 65280, background: 2236962 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        N = function() { return { color: { surface: 4960263, selected: 5890941, in: 8191062, out: 3052203, halo: 12451784, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        H = function() { return { color: { surface: 10249172, selected: 9518591, in: 9071316, out: 3442404, halo: 3918847, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        R = function() { return { color: { surface: 1516756, selected: 9259760, in: 14476062, out: 3873758, halo: 15658622, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        M = function() { return { color: { surface: 8260528, selected: 16744448, in: 16711680, out: 689612, halo: 558079, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        h = function() { return { color: { surface: 11560614, selected: 14840188, in: 16777215, out: 14811136, halo: 16735838, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }(),
        T = function() { return { color: { surface: 10421424, selected: 14933858, in: 16742403, out: 14811136, halo: 16758282, background: 0 }, brightness: { ocean: .5, mentioned: .5, related: .5 } } }();
    U.register("blueInk", W), U.register("earlySpring", s), U.register("frozenBerry", b), U.register("gorgeousDream", K), U.register("juicyCake", F), U.register("lemonGate", L), U.register("magic", m), U.register("mint", N), U.register("nearMoon", H), U.register("octoberParty", R), U.register("redBlue", M), U.register("strawberry", h), U.register("sunset", T);
    var y = function() { return { 1: "PE", 2: "BF", 3: "FR", 4: "LY", 5: "BY", 6: "PK", 7: "ID", 8: "YE", 9: "MG", 10: "BO", 11: "CI", 12: "DZ", 13: "CH", 14: "CM", 15: "MK", 16: "BW", 17: "UA", 18: "KE", 19: "TW", 20: "JO", 21: "MX", 22: "AE", 23: "BZ", 24: "BR", 25: "SL", 26: "ML", 27: "CD", 28: "IT", 29: "SO", 30: "AF", 31: "BD", 32: "DO", 33: "GW", 34: "GH", 35: "AT", 36: "SE", 37: "TR", 38: "UG", 39: "MZ", 40: "JP", 41: "NZ", 42: "CU", 43: "VE", 44: "PT", 45: "CO", 46: "MR", 47: "AO", 48: "DE", 49: "SD", 50: "TH", 51: "AU", 52: "PG", 53: "IQ", 54: "HR", 55: "GL", 56: "NE", 57: "DK", 58: "LV", 59: "RO", 60: "ZM", 61: "IR", 62: "MM", 63: "ET", 64: "GT", 65: "SR", 66: "EH", 67: "CZ", 68: "TD", 69: "AL", 70: "FI", 71: "SY", 72: "KG", 73: "SB", 74: "OM", 75: "PA", 76: "AR", 77: "GB", 78: "CR", 79: "PY", 80: "GN", 81: "IE", 82: "NG", 83: "TN", 84: "PL", 85: "NA", 86: "ZA", 87: "EG", 88: "TZ", 89: "GE", 90: "SA", 91: "VN", 92: "RU", 93: "HT", 94: "BA", 95: "IN", 96: "CN", 97: "CA", 98: "SV", 99: "GY", 100: "BE", 101: "GQ", 102: "LS", 103: "BG", 104: "BI", 105: "DJ", 106: "AZ", 107: "MY", 108: "PH", 109: "UY", 110: "CG", 111: "RS", 112: "ME", 113: "EE", 114: "RW", 115: "AM", 116: "SN", 117: "TG", 118: "ES", 119: "GA", 120: "HU", 121: "MW", 122: "TJ", 123: "KH", 124: "KR", 125: "HN", 126: "IS", 127: "NI", 128: "CL", 129: "MA", 130: "LR", 131: "NL", 132: "CF", 133: "SK", 134: "LT", 135: "ZW", 136: "LK", 137: "IL", 138: "LA", 139: "KP", 140: "GR", 141: "TM", 142: "EC", 143: "BJ", 144: "SI", 145: "NO", 146: "MD", 147: "LB", 148: "NP", 149: "ER", 150: "US", 151: "KZ", 152: "AQ", 153: "SZ", 154: "UZ", 155: "MN", 156: "BT", 157: "NC", 158: "FJ", 159: "KW", 160: "TL", 161: "BS", 162: "VU", 163: "FK", 164: "GM", 165: "QA", 166: "JM", 167: "CY", 168: "PR", 169: "PS", 170: "BN", 171: "TT", 172: "CV", 173: "PF", 174: "WS", 175: "LU", 176: "KM", 177: "MU", 178: "FO", 179: "ST", 181: "DM", 182: "TO", 183: "KI", 184: "FM", 185: "BH", 186: "AD", 187: "MP", 188: "PW", 189: "SC", 190: "AG", 191: "BB", 192: "TC", 193: "VC", 194: "LC", 195: "YT", 196: "VI", 197: "GD", 198: "MT", 199: "MV", 200: "KY", 201: "KN", 202: "MS", 203: "BL", 204: "NU", 205: "PM", 206: "CK", 207: "WF", 208: "AS", 209: "MH", 210: "AW", 211: "LI", 212: "VG", 213: "SH", 214: "JE", 215: "AI", 217: "GG", 218: "SM", 219: "BM", 220: "TV", 221: "NR", 222: "GI", 223: "PN", 224: "MC", 225: "VA", 226: "IM", 227: "GU", 228: "SG" } }(),
        G = function() {
            function A(A) { return "string" == typeof A && A.constructor === String }

            function C(A) { return "#" !== A.charAt(0) ? null : parseInt(A.substring(1), 16) }

            function g(A) { return A < 0 || A > 16777215 ? null : A }

            function I(A) { for (var C = A.offsetTop, g = A.offsetParent; null !== g;) C += g.offsetTop, g = g.offsetParent; var I; return I = "BackCompat" === document.compatMode ? document.body.scrollTop : 0 === document.documentElement.scrollTop ? document.body.scrollTop : document.documentElement.scrollTop, C - I }

            function r(A) { for (var C = A.offsetLeft, g = A.offsetParent; null !== g;) C += g.offsetLeft, g = g.offsetParent; var I; return I = "BackCompat" === document.compatMode ? document.body.scrollLeft : 0 === document.documentElement.scrollTop ? document.body.scrollLeft : document.documentElement.scrollLeft, C - I }

            function o(A) { return Array.isArray(A) }
            return {
                wrap: function(A, C, g) { for (g -= C; A < C;) A += g; return A % g },
                constrain: function(A, C, g) { return A < C ? A = C : A > g && (A = g), A },
                formatColor: function(I) { return A(I) ? C(I) : g(I) },
                transformBrightness: function(A, C, g) { return A > 1 ? g : A < 0 ? C : Math.floor(C + (g - C) * A) },
                transformCountryData: function(A) { var C = {}; return C.name = A.name, C.lat = A.lat, C.lon = A.lon, C.center = A.center.clone(), C.ISOCode = y[A.colorCode], C },
                flattenCountryData: function(A, C, g, I) {
                    if (0 !== A.length) {
                        var r = A.map(function(A) { return A[C] }),
                            o = Math.min.apply(null, r),
                            v = Math.max.apply(null, r);
                        A.forEach(function(A) {
                            var r = A[C];
                            v - o != 0 && (A[C] = (r - o) * (I - g) / (v - o) + g)
                        })
                    }
                },
                getElementViewTop: I,
                getElementViewLeft: r,
                isArray: o
            }
        }(),

        Y = function() {
            var A = { AD: { colorCode: 186, name: "ANDORRA", lat: 42.5, lon: 1.6 }, AE: { colorCode: 22, name: "UNITED ARAB EMIRATES", lat: 24, lon: 54 }, AF: { colorCode: 30, name: "AFGHANISTAN", lat: 33, lon: 65 }, AG: { colorCode: 190, name: "ANTIGUA AND BARBUDA", lat: 17.05, lon: -61.8 }, AI: { colorCode: 215, name: "ANGUILLA", lat: 18.25, lon: -63.1667 }, AL: { colorCode: 69, name: "ALBANIA", lat: 41, lon: 20 }, AM: { colorCode: 115, name: "ARMENIA", lat: 40, lon: 45 }, AO: { colorCode: 47, name: "ANGOLA", lat: -12.5, lon: 18.5 }, AQ: { colorCode: 152, name: "ANTARCTICA", lat: -90, lon: 0 }, AR: { colorCode: 76, name: "ARGENTINA", lat: -34, lon: -64 }, AS: { colorCode: 208, name: "AMERICAN SAMOA", lat: -14.3333, lon: -170 }, AT: { colorCode: 35, name: "AUSTRIA", lat: 47.3333, lon: 13.3333 }, AU: { colorCode: 51, name: "AUSTRALIA", lat: -27, lon: 133 }, AW: { colorCode: 210, name: "ARUBA", lat: 12.5, lon: -69.9667 }, AZ: { colorCode: 106, name: "AZERBAIJAN", lat: 40.5, lon: 47.5 }, BA: { colorCode: 94, name: "BOSNIA AND HERZEGOVINA", lat: 44, lon: 18 }, BB: { colorCode: 191, name: "BARBADOS", lat: 13.1667, lon: -59.5333 }, BD: { colorCode: 31, name: "BANGLADESH", lat: 24, lon: 90 }, BE: { colorCode: 100, name: "BELGIUM", lat: 50.8333, lon: 4 }, BF: { colorCode: 2, name: "BURKINA FASO", lat: 13, lon: -2 }, BG: { colorCode: 103, name: "BULGARIA", lat: 43, lon: 25 }, BH: { colorCode: 185, name: "BAHRAIN", lat: 26, lon: 50.55 }, BI: { colorCode: 104, name: "BURUNDI", lat: -3.5, lon: 30 }, BJ: { colorCode: 143, name: "BENIN", lat: 9.5, lon: 2.25 }, BL: { colorCode: 203, name: "SAINT BARTHÉLEMY" }, BM: { colorCode: 219, name: "BERMUDA", lat: 32.3333, lon: -64.75 }, BN: { colorCode: 170, name: "BRUNEI DARUSSALAM", lat: 4.5, lon: 114.6667 }, BO: { colorCode: 10, name: "BOLIVIA, PLURINATIONAL STATE OF", lat: -17, lon: -65 }, BR: { colorCode: 24, name: "BRAZIL", lat: -10, lon: -55 }, BS: { colorCode: 161, name: "BAHAMAS", lat: 24.25, lon: -76 }, BT: { colorCode: 156, name: "BHUTAN", lat: 27.5, lon: 90.5 }, BW: { colorCode: 16, name: "BOTSWANA", lat: -22, lon: 24 }, BY: { colorCode: 5, name: "BELARUS", lat: 53, lon: 28 }, BZ: { colorCode: 23, name: "BELIZE", lat: 17.25, lon: -88.75 }, CA: { colorCode: 97, name: "CANADA", lat: 60, lon: -95 }, CD: { colorCode: 27, name: "CONGO, THE DEMOCRATIC REPUBLIC OF THE", lat: 0, lon: 25 }, CF: { colorCode: 132, name: "CENTRAL AFRICAN REPUBLIC", lat: 7, lon: 21 }, CG: { colorCode: 110, name: "CONGO", lat: -1, lon: 15 }, CH: { colorCode: 13, name: "SWITZERLAND", lat: 47, lon: 8 }, CI: { colorCode: 11, name: "CÔTE D'IVOIRE", lat: 8, lon: -5 }, CK: { colorCode: 206, name: "COOK ISLANDS", lat: -21.2333, lon: -159.7667 }, CL: { colorCode: 128, name: "CHILE", lat: -30, lon: -71 }, CM: { colorCode: 14, name: "CAMEROON", lat: 6, lon: 12 }, CN: { colorCode: 96, name: "CHINA", lat: 35, lon: 105 }, CO: { colorCode: 45, name: "COLOMBIA", lat: 4, lon: -72 }, CR: { colorCode: 78, name: "COSTA RICA", lat: 10, lon: -84 }, CU: { colorCode: 42, name: "CUBA", lat: 21.5, lon: -80 }, CV: { colorCode: 172, name: "CAPE VERDE", lat: 16, lon: -24 }, CY: { colorCode: 167, name: "CYPRUS", lat: 35, lon: 33 }, CZ: { colorCode: 67, name: "CZECH REPUBLIC", lat: 49.75, lon: 15.5 }, DE: { colorCode: 48, name: "GERMANY", lat: 51, lon: 9 }, DJ: { colorCode: 105, name: "DJIBOUTI", lat: 11.5, lon: 43 }, DK: { colorCode: 57, name: "DENMARK", lat: 56, lon: 10 }, DM: { colorCode: 181, name: "DOMINICA", lat: 15.4167, lon: -61.3333 }, DO: { colorCode: 32, name: "DOMINICAN REPUBLIC", lat: 19, lon: -70.6667 }, DZ: { colorCode: 12, name: "ALGERIA", lat: 28, lon: 3 }, EC: { colorCode: 142, name: "ECUADOR", lat: -2, lon: -77.5 }, EE: { colorCode: 113, name: "ESTONIA", lat: 59, lon: 26 }, EG: { colorCode: 87, name: "EGYPT", lat: 27, lon: 30 }, EH: { colorCode: 66, name: "WESTERN SAHARA", lat: 24.5, lon: -13 }, ER: { colorCode: 149, name: "ERITREA", lat: 15, lon: 39 }, ES: { colorCode: 118, name: "SPAIN", lat: 40, lon: -4 }, ET: { colorCode: 63, name: "ETHIOPIA", lat: 8, lon: 38 }, FI: { colorCode: 70, name: "FINLAND", lat: 64, lon: 26 }, FJ: { colorCode: 158, name: "FIJI", lat: -18, lon: 175 }, FK: { colorCode: 163, name: "FALKLAND ISLANDS (MALVINAS)", lat: -51.75, lon: -59 }, FM: { colorCode: 184, name: "MICRONESIA, FEDERATED STATES OF", lat: 6.9167, lon: 158.25 }, FO: { colorCode: 178, name: "FAROE ISLANDS", lat: 62, lon: -7 }, FR: { colorCode: 3, name: "FRANCE", lat: 46, lon: 2 }, GA: { colorCode: 119, name: "GABON", lat: -1, lon: 11.75 }, GB: { colorCode: 77, name: "UNITED KINGDOM", lat: 54, lon: -2 }, GD: { colorCode: 197, name: "GRENADA", lat: 12.1167, lon: -61.6667 }, GE: { colorCode: 89, name: "GEORGIA", lat: 42, lon: 43.5 }, GG: { colorCode: 217, name: "GUERNSEY", lat: 49.5, lon: -2.56 }, GH: { colorCode: 34, name: "GHANA", lat: 8, lon: -2 }, GI: { colorCode: 222, name: "GIBRALTAR", lat: 36.1833, lon: -5.3667 }, GL: { colorCode: 55, name: "GREENLAND", lat: 72, lon: -40 }, GM: { colorCode: 164, name: "GAMBIA", lat: 13.4667, lon: -16.5667 }, GN: { colorCode: 80, name: "GUINEA", lat: 11, lon: -10 }, GP: { colorCode: 3, name: "FRANCE", lat: 46, lon: 2 }, GQ: { colorCode: 101, name: "EQUATORIAL GUINEA", lat: 2, lon: 10 }, GR: { colorCode: 140, name: "GREECE", lat: 39, lon: 22 }, GT: { colorCode: 64, name: "GUATEMALA", lat: 15.5, lon: -90.25 }, GU: { colorCode: 227, name: "GUAM", lat: 13.4667, lon: 144.7833 }, GW: { colorCode: 33, name: "GUINEA-BISSAU", lat: 12, lon: -15 }, GY: { colorCode: 99, name: "GUYANA", lat: 5, lon: -59 }, HK: { colorCode: 96, name: "CHINA", lat: 35, lon: 105 }, HN: { colorCode: 125, name: "HONDURAS", lat: 15, lon: -86.5 }, HR: { colorCode: 54, name: "CROATIA", lat: 45.1667, lon: 15.5 }, HT: { colorCode: 93, name: "HAITI", lat: 19, lon: -72.4167 }, HU: { colorCode: 120, name: "HUNGARY", lat: 47, lon: 20 }, ID: { colorCode: 7, name: "INDONESIA", lat: -5, lon: 120 }, IE: { colorCode: 81, name: "IRELAND", lat: 53, lon: -8 }, IL: { colorCode: 137, name: "ISRAEL", lat: 31.5, lon: 34.75 }, IM: { colorCode: 226, name: "ISLE OF MAN", lat: 54.23, lon: -4.55 }, IN: { colorCode: 95, name: "INDIA", lat: 20, lon: 77 }, IQ: { colorCode: 53, name: "IRAQ", lat: 33, lon: 44 }, IR: { colorCode: 61, name: "IRAN, ISLAMIC REPUBLIC OF", lat: 32, lon: 53 }, IS: { colorCode: 126, name: "ICELAND", lat: 65, lon: -18 }, IT: { colorCode: 28, name: "ITALY", lat: 42.8333, lon: 12.8333 }, JE: { colorCode: 214, name: "JERSEY", lat: 49.21, lon: -2.13 }, JM: { colorCode: 166, name: "JAMAICA", lat: 18.25, lon: -77.5 }, JO: { colorCode: 20, name: "JORDAN", lat: 31, lon: 36 }, JP: { colorCode: 40, name: "JAPAN", lat: 36, lon: 138 }, KE: { colorCode: 18, name: "KENYA", lat: 1, lon: 38 }, KG: { colorCode: 72, name: "KYRGYZSTAN", lat: 41, lon: 75 }, KH: { colorCode: 123, name: "CAMBODIA", lat: 13, lon: 105 }, KI: { colorCode: 183, name: "KIRIBATI", lat: 1.4167, lon: 173 }, KM: { colorCode: 176, name: "COMOROS", lat: -12.1667, lon: 44.25 }, KN: { colorCode: 201, name: "SAINT KITTS AND NEVIS", lat: 17.3333, lon: -62.75 }, KP: { colorCode: 139, name: "KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF", lat: 40, lon: 127 }, KR: { colorCode: 124, name: "KOREA, REPUBLIC OF", lat: 37, lon: 127.5 }, KW: { colorCode: 159, name: "KUWAIT", lat: 29.3375, lon: 47.6581 }, KY: { colorCode: 200, name: "CAYMAN ISLANDS", lat: 19.5, lon: -80.5 }, KZ: { colorCode: 151, name: "KAZAKHSTAN", lat: 48, lon: 68 }, LA: { colorCode: 138, name: "LAO PEOPLE'S DEMOCRATIC REPUBLIC", lat: 18, lon: 105 }, LB: { colorCode: 147, name: "LEBANON", lat: 33.8333, lon: 35.8333 }, LC: { colorCode: 194, name: "SAINT LUCIA", lat: 13.8833, lon: -61.1333 }, LI: { colorCode: 211, name: "LIECHTENSTEIN", lat: 47.1667, lon: 9.5333 }, LK: { colorCode: 136, name: "SRI LANKA", lat: 7, lon: 81 }, LR: { colorCode: 130, name: "LIBERIA", lat: 6.5, lon: -9.5 }, LS: { colorCode: 102, name: "LESOTHO", lat: -29.5, lon: 28.5 }, LT: { colorCode: 134, name: "LITHUANIA", lat: 56, lon: 24 }, LU: { colorCode: 175, name: "LUXEMBOURG", lat: 49.75, lon: 6.1667 }, LV: { colorCode: 58, name: "LATVIA", lat: 57, lon: 25 }, LY: { colorCode: 4, name: "LIBYA", lat: 25, lon: 17 }, MA: { colorCode: 129, name: "MOROCCO", lat: 32, lon: -5 }, MC: { colorCode: 224, name: "MONACO", lat: 43.7333, lon: 7.4 }, MD: { colorCode: 146, name: "MOLDOVA, REPUBLIC OF", lat: 47, lon: 29 }, ME: { colorCode: 112, name: "MONTENEGRO", lat: 42, lon: 19 }, MG: { colorCode: 9, name: "MADAGASCAR", lat: -20, lon: 47 }, MH: { colorCode: 209, name: "MARSHALL ISLANDS", lat: 9, lon: 168 }, MK: { colorCode: 15, name: "MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF", lat: 41.8333, lon: 22 }, ML: { colorCode: 26, name: "MALI", lat: 17, lon: -4 }, MM: { colorCode: 62, name: "MYANMAR", lat: 22, lon: 98 }, MN: { colorCode: 155, name: "MONGOLIA", lat: 46, lon: 105 }, MP: { colorCode: 187, name: "NORTHERN MARIANA ISLANDS", lat: 15.2, lon: 145.75 }, MR: { colorCode: 46, name: "MAURITANIA", lat: 20, lon: -12 }, MS: { colorCode: 202, name: "MONTSERRAT", lat: 16.75, lon: -62.2 }, MT: { colorCode: 198, name: "MALTA", lat: 35.8333, lon: 14.5833 }, MU: { colorCode: 177, name: "MAURITIUS", lat: -20.2833, lon: 57.55 }, MV: { colorCode: 199, name: "MALDIVES", lat: 3.25, lon: 73 }, MW: { colorCode: 121, name: "MALAWI", lat: -13.5, lon: 34 }, MX: { colorCode: 21, name: "MEXICO", lat: 23, lon: -102 }, MY: { colorCode: 107, name: "MALAYSIA", lat: 2.5, lon: 112.5 }, MZ: { colorCode: 39, name: "MOZAMBIQUE", lat: -18.25, lon: 35 }, NA: { colorCode: 85, name: "NAMIBIA", lat: -22, lon: 17 }, NC: { colorCode: 157, name: "NEW CALEDONIA", lat: -21.5, lon: 165.5 }, NE: { colorCode: 56, name: "NIGER", lat: 16, lon: 8 }, NG: { colorCode: 82, name: "NIGERIA", lat: 10, lon: 8 }, NI: { colorCode: 127, name: "NICARAGUA", lat: 13, lon: -85 }, NL: { colorCode: 131, name: "NETHERLANDS", lat: 52.5, lon: 5.75 }, NO: { colorCode: 145, name: "NORWAY", lat: 62, lon: 10 }, NP: { colorCode: 148, name: "NEPAL", lat: 28, lon: 84 }, NR: { colorCode: 221, name: "NAURU", lat: -.5333, lon: 166.9167 }, NU: { colorCode: 204, name: "NIUE", lat: -19.0333, lon: -169.8667 }, NZ: { colorCode: 41, name: "NEW ZEALAND", lat: -41, lon: 174 }, OM: { colorCode: 74, name: "OMAN", lat: 21, lon: 57 }, PA: { colorCode: 75, name: "PANAMA", lat: 9, lon: -80 }, PE: { colorCode: 1, name: "PERU", lat: -10, lon: -76 }, PF: { colorCode: 173, name: "FRENCH POLYNESIA", lat: -15, lon: -140 }, PG: { colorCode: 52, name: "PAPUA NEW GUINEA", lat: -6, lon: 147 }, PH: { colorCode: 108, name: "PHILIPPINES", lat: 13, lon: 122 }, PK: { colorCode: 6, name: "PAKISTAN", lat: 30, lon: 70 }, PL: { colorCode: 84, name: "POLAND", lat: 52, lon: 20 }, PM: { colorCode: 205, name: "SAINT PIERRE AND MIQUELON", lat: 46.8333, lon: -56.3333 }, PN: { colorCode: 223, name: "PITCAIRN", lat: -24.7, lon: -127.4 }, PR: { colorCode: 168, name: "PUERTO RICO", lat: 18.25, lon: -66.5 }, PS: { colorCode: 169, name: "PALESTINIAN TERRITORY, OCCUPIED", lat: 32, lon: 35.25 }, PT: { colorCode: 44, name: "PORTUGAL", lat: 39.5, lon: -8 }, PW: { colorCode: 188, name: "PALAU", lat: 7.5, lon: 134.5 }, PY: { colorCode: 79, name: "PARAGUAY", lat: -23, lon: -58 }, QA: { colorCode: 165, name: "QATAR", lat: 25.5, lon: 51.25 }, RE: { colorCode: 3, name: "FRANCE", lat: 46, lon: 2 }, RO: { colorCode: 59, name: "ROMANIA", lat: 46, lon: 25 }, RS: { colorCode: 111, name: "SERBIA", lat: 44, lon: 21 }, RU: { colorCode: 92, name: "RUSSIAN FEDERATION", lat: 60, lon: 100 }, RW: { colorCode: 114, name: "RWANDA", lat: -2, lon: 30 }, SA: { colorCode: 90, name: "SAUDI ARABIA", lat: 25, lon: 45 }, SB: { colorCode: 73, name: "SOLOMON ISLANDS", lat: -8, lon: 159 }, SC: { colorCode: 189, name: "SEYCHELLES", lat: -4.5833, lon: 55.6667 }, SD: { colorCode: 49, name: "SUDAN", lat: 15, lon: 30 }, SE: { colorCode: 36, name: "SWEDEN", lat: 62, lon: 15 }, SG: { colorCode: 228, name: "SINGAPORE", lat: 1.3667, lon: 103.8 }, SH: { colorCode: 213, name: "SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA", lat: -15.9333, lon: -5.7 }, SI: { colorCode: 144, name: "SLOVENIA", lat: 46, lon: 15 }, SK: { colorCode: 133, name: "SLOVAKIA", lat: 48.6667, lon: 19.5 }, SL: { colorCode: 25, name: "SIERRA LEONE", lat: 8.5, lon: -11.5 }, SM: { colorCode: 218, name: "SAN MARINO", lat: 43.7667, lon: 12.4167 }, SN: { colorCode: 116, name: "SENEGAL", lat: 14, lon: -14 }, SO: { colorCode: 29, name: "SOMALIA", lat: 10, lon: 49 }, SR: { colorCode: 65, name: "SURINAME", lat: 4, lon: -56 }, ST: { colorCode: 179, name: "SAO TOME AND PRINCIPE", lat: 1, lon: 7 }, SV: { colorCode: 98, name: "EL SALVADOR", lat: 13.8333, lon: -88.9167 }, SY: { colorCode: 71, name: "SYRIAN ARAB REPUBLIC", lat: 35, lon: 38 }, SZ: { colorCode: 153, name: "SWAZILAND", lat: -26.5, lon: 31.5 }, TC: { colorCode: 192, name: "TURKS AND CAICOS ISLANDS", lat: 21.75, lon: -71.5833 }, TD: { colorCode: 68, name: "CHAD", lat: 15, lon: 19 }, TG: { colorCode: 117, name: "TOGO", lat: 8, lon: 1.1667 }, TH: { colorCode: 50, name: "THAILAND", lat: 15, lon: 100 }, TJ: { colorCode: 122, name: "TAJIKISTAN", lat: 39, lon: 71 }, TL: { colorCode: 160, name: "TIMOR-LESTE", lat: -8.55, lon: 125.5167 }, TM: { colorCode: 141, name: "TURKMENISTAN", lat: 40, lon: 60 }, TN: { colorCode: 83, name: "TUNISIA", lat: 34, lon: 9 }, TO: { colorCode: 182, name: "TONGA", lat: -20, lon: -175 }, TR: { colorCode: 37, name: "TURKEY", lat: 39, lon: 35 }, TT: { colorCode: 171, name: "TRINIDAD AND TOBAGO", lat: 11, lon: -61 }, TV: { colorCode: 220, name: "TUVALU", lat: -8, lon: 178 }, TW: { colorCode: 19, name: "TAIWAN", lat: 23.5, lon: 121 }, TZ: { colorCode: 88, name: "TANZANIA, UNITED REPUBLIC OF", lat: -6, lon: 35 }, UA: { colorCode: 17, name: "UKRAINE", lat: 49, lon: 32 }, UG: { colorCode: 38, name: "UGANDA", lat: 1, lon: 32 }, US: { colorCode: 150, name: "UNITED STATES", lat: 38, lon: -97 }, UY: { colorCode: 109, name: "URUGUAY", lat: -33, lon: -56 }, UZ: { colorCode: 154, name: "UZBEKISTAN", lat: 41, lon: 64 }, VA: { colorCode: 225, name: "HOLY SEE (VATICAN CITY STATE)", lat: 41.9, lon: 12.45 }, VC: { colorCode: 193, name: "SAINT VINCENT AND THE GRENADINES", lat: 13.25, lon: -61.2 }, VE: { colorCode: 43, name: "VENEZUELA, BOLIVARIAN REPUBLIC OF", lat: 8, lon: -66 }, VG: { colorCode: 212, name: "VIRGIN ISLANDS, BRITISH", lat: 18.5, lon: -64.5 }, VI: { colorCode: 196, name: "VIRGIN ISLANDS, U.S.", lat: 18.3333, lon: -64.8333 }, VN: { colorCode: 91, name: "VIET NAM", lat: 16, lon: 106 }, VU: { colorCode: 162, name: "VANUATU", lat: -16, lon: 167 }, WF: { colorCode: 207, name: "WALLIS AND FUTUNA", lat: -13.3, lon: -176.2 }, WS: { colorCode: 174, name: "SAMOA", lat: -13.5833, lon: -172.3333 }, YE: { colorCode: 8, name: "YEMEN", lat: 15, lon: 48 }, YT: { colorCode: 195, name: "MAYOTTE", lat: -12.8333, lon: 45.1667 }, ZA: { colorCode: 86, name: "SOUTH AFRICA", lat: -29, lon: 24 }, ZM: { colorCode: 60, name: "ZAMBIA", lat: -15, lon: 30 }, ZW: { colorCode: 135, name: "ZIMBABWE", lat: -20, lon: 30 } };
            return function() {
                for (var C in A) {
                    var g = A[C],
                        I = g.lon - 90,
                        r = g.lat,
                        o = Math.PI / 2 - r * Math.PI / 180 - .01 * Math.PI,
                        v = 2 * Math.PI - I * Math.PI / 180 + .06 * Math.PI,
                        t = new THREE.Vector3;
                    t.x = Math.sin(o) * Math.cos(v) * 100, t.y = 100 * Math.cos(o), t.z = Math.sin(o) * Math.sin(v) * 100, g.center = t
                }
            }(), A
        }(),
        S = function() {
            var A = { names: ["OCEANIA", "NORTH AMERICA", "SOUTH AMERICA", "AFRICA", "EUROPE", "ASIA"], OCEANIA: { countries: ["AU", "CK", "FJ", "GU", "NZ", "PG"], lat: -27, lon: 133 }, "NORTH AMERICA": { countries: ["BM", "BS", "CA", "CR", "CU", "GD", "GT", "HN", "HT", "JM", "MX", "NI", "PA", "US", "VE"], lat: 39.5, lon: -95 }, "SOUTH AMERICA": { countries: ["AR", "BO", "BR", "CL", "CO", "EC", "GY", "PE", "PY", "UY"], lat: -21, lon: -58.5 }, AFRICA: { countries: ["AO", "BI", "BJ", "BW", "CF", "CG", "CM", "CV", "DZ", "EG", "ET", "GA", "GH", "GM", "GN", "GQ", "KE", "LY", "MA", "MG", "ML", "MR", "MU", "MZ", "NA", "NE", "NG", "RW", "SD", "SN", "SO", "TZ", "UG", "ZA", "ZM", "ZW", "TN"], lat: 1, lon: 17 }, EUROPE: { countries: ["AT", "BE", "BG", "CH", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GB", "GR", "HR", "HU", "IE", "IS", "IT", "LT", "LV", "MT", "NL", "NO", "PL", "PT", "RO", "RU", "SE", "SK", "SM", "UA", "VA"], lat: 53.5, lon: 28 }, ASIA: { countries: ["AE", "AF", "AL", "AZ", "BD", "BH", "BN", "BT", "CN", "CY", "ID", "IL", "IN", "IQ", "JO", "JP", "KH", "KP", "KR", "KW", "KZ", "LA", "LB", "LU", "MN", "MV", "MY", "NP", "OM", "PH", "PK", "QA", "SA", "SG", "SY", "TH", "TJ", "TM", "UZ", "VN", "YE"], lat: 35, lon: 108.5 } };
            return function() {
                for (var C = 0; C < A.names.length; C++) {
                    var g = A.names[C],
                        I = A[g],
                        r = I.lon - 90,
                        o = I.lat,
                        v = Math.PI / 2 - o * Math.PI / 180 - .01 * Math.PI,
                        t = 2 * Math.PI - r * Math.PI / 180 + .06 * Math.PI,
                        e = new THREE.Vector3;
                    e.x = Math.sin(v) * Math.cos(t) * 100, e.y = 100 * Math.cos(v), e.z = Math.sin(v) * Math.sin(t) * 100, I.center = e
                }
            }(), A
        }(),
        J = function() {
            function A(A) { var C = new THREE.Scene; return null !== A.configure.color.background && (C.background = new THREE.Color(A.configure.color.background)), C }

            function C(A) { var C = new THREE.PerspectiveCamera(12, A.clientWidth / A.clientHeight, 1, 2e4); return C.position.z = 1400, C.position.y = 0, C.lookAt(0, 0, 0), C }

            function g() {
                var A = [],
                    C = new THREE.AmbientLight(5263440),
                    g = new THREE.SpotLight(15658734, 3);
                g.position.x = 730, g.position.y = 520, g.position.z = 626, g.castShadow = !0;
                var I = new THREE.PointLight(2236962, 14.8);
                return I.position.x = -640, I.position.y = -500, I.position.z = -1e3, A.push(C), A.push(g), A.push(I), A
            }

            function I(A, C) {
                var g = document.createElement("canvas"),
                    I = getComputedStyle(A),
                    r = parseFloat(I.paddingLeft) + parseFloat(I.paddingRight),
                    o = parseFloat(I.paddingTop) + parseFloat(I.paddingBottom),
                    v = parseFloat(I.borderLeftWidth) + parseFloat(I.borderRightWidth),
                    t = parseFloat(I.borderTopWidth) + parseFloat(I.borderBottomWidth);
                g.width = A.clientWidth - r - v, g.height = A.clientHeight - o - t;
                var e = new THREE.WebGLRenderer({ canvas: g, antialias: !0, alpha: C });
                return e.setSize(g.width, g.height), e.autoClear = !1, e.sortObjects = !1, e.generateMipmaps = !1, e
            }

            function t() { var A = new Stats; return A.showPanel(1), A.dom.style.position = "absolute", A }

            function e(A) {
                var C = new o(A),
                    g = new THREE.ShaderMaterial({ uniforms: C.uniforms, vertexShader: C.vertexShader, fragmentShader: C.fragmentShader }),
                    I = new THREE.Mesh(new THREE.SphereGeometry(100, 40, 40), g);
                return I.doubleSided = !1, I.rotation.x = Math.PI, I.rotation.y = -Math.PI / 2, I.rotation.z = Math.PI, I.name = "sphere", I.earthSurfaceShader = C, I
            }

            function f(A) {
                var C = new THREE.SphereBufferGeometry(100, 32, 32),
                    g = new r(A),
                    I = new THREE.ShaderMaterial({ uniforms: g.uniforms, vertexShader: g.vertexShader, fragmentShader: g.fragmentShader, side: THREE.BackSide, blending: THREE.AdditiveBlending, transparent: !0 }),
                    o = new THREE.Mesh(C, I);
                return o.scale.set(1.2, 1.2, 1.2), o.haloShader = g, o
            }

            function n(A) {
                var C = a(A),
                    g = l(C.linesGeo),
                    I = D(C.particlesGeo, C.movingPoints);
                return g.add(I), g
            }

            function a(A) {
                var C = A.globalData;
                A.relatedCountries = [];
                var g = A.selectedCountry,
                    I = new THREE.Geometry,
                    r = [],
                    o = new THREE.BufferGeometry,
                    v = [],
                    t = [],
                    e = [],
                    f = [];
                for (var n in C) {
                    var a = C[n];
                    if (!(A.configure.control.inOnly && a.i !== y[g.colorCode] || A.configure.control.outOnly && a.e !== y[g.colorCode]) && (a.i === y[g.colorCode] || a.e === y[g.colorCode])) {
                        var l;
                        if (a.e === y[g.colorCode]) {
                            if (-1 !== S.names.indexOf(a.i.toUpperCase()))
                                for (var D = S[a.i.toUpperCase()].countries, V = 0; V < D.length; V++) {
                                    var P = D[V];
                                    void 0 !== Y[P] && A.relatedCountries.push(Y[D[V]])
                                } else A.relatedCountries.push(Y[a.i]);
                            l = void 0 === a.outColor ? new THREE.Color(A.configure.color.out) : new THREE.Color(a.outColor)
                        } else A.relatedCountries.push(Y[a.e]), l = void 0 === a.inColor ? new THREE.Color(A.configure.color.in) : new THREE.Color(a.inColor);
                        var q;
                        for (var Q in a.lineGeometry.vertices) r.push(l), q = l;
                        I.merge(a.lineGeometry);
                        var B = q.clone(),
                            w = a.lineGeometry.vertices,
                            d = Math.floor(a.v / 8e3 / a.lineGeometry.vertices.length) + 1;
                        d = G.constrain(d, 1, 100);
                        var u = a.lineGeometry.size * A.container.clientHeight / 1e3;
                        for (Q = 0; Q < d; Q++) {
                            var c = Q / d * w.length,
                                E = G.constrain(Math.floor(c), 0, w.length - 1),
                                X = w[E],
                                i = X.clone();
                            i.moveIndex = E, i.nextIndex = E + 1, i.nextIndex >= w.length && (i.nextIndex = 0), i.lerpN = 0, i.path = w, v.push(i), i.size = u, t.push(i.x), t.push(i.y), t.push(i.z), e.push(u), f.push(B.r), f.push(B.g), f.push(B.b)
                        }
                    }
                }
                return I.colors = r, o.addAttribute("position", new THREE.Float32BufferAttribute(t, 3)), o.addAttribute("size", new THREE.Float32BufferAttribute(e, 1)), o.addAttribute("customColor", new THREE.Float32BufferAttribute(f, 3)), o.attributes.position.needsUpdate = !0, { linesGeo: I, particlesGeo: o, movingPoints: v }
            }

            function l(A) { var C = new THREE.Line(A, new THREE.LineBasicMaterial({ color: 16777215, opacity: 1, blending: THREE.AdditiveBlending, transparent: !0, depthWrite: !1, vertexColors: !0, linewidth: 1 })); return C.renderDepth = !1, C }

            function D(A, C) {
                var g = new v,
                    I = new THREE.ShaderMaterial({ uniforms: g.uniforms, vertexShader: g.vertexShader, fragmentShader: g.fragmentShader, blending: THREE.AdditiveBlending, depthTest: !0, depthWrite: !1, transparent: !0 }),
                    r = new THREE.Points(A, I);
                return r.dynamic = !0, r.movingPoints = C, r.update = function() {
                    for (var A in this.movingPoints) {
                        var C = this.movingPoints[A],
                            g = C.path;
                        C.lerpN += .05, C.lerpN > 1 && (C.lerpN = 0, C.moveIndex = C.nextIndex, ++C.nextIndex >= g.length && (C.moveIndex = 0, C.nextIndex = 1));
                        var I = g[C.moveIndex],
                            r = g[C.nextIndex];
                        C.copy(I), void 0 !== r && void 0 !== C && C.lerp(r, C.lerpN), this.geometry.attributes.position.array[3 * A] = C.x, this.geometry.attributes.position.array[3 * A + 1] = C.y, this.geometry.attributes.position.array[3 * A + 2] = C.z
                    }
                    this.geometry.attributes.position.needsUpdate = !0
                }, r
            }
            return { createScene: A, createCamera: C, createLights: g, createRenderer: I, createStats: t, createSphere: e, createHalo: f, createSplineSystem: n }
        }();
    a.prototype.setSuccessor = function(A) { this.successor = A }, a.prototype.process = function(A) { this.isMatched(A) && this.processDetail(A), null !== this.successor && this.successor.process(A) }, a.prototype.processDetail = function(A) {}, a.prototype.isMatched = function(A) { return !0 }, l.prototype = new a, l.prototype.constructor = l, l.prototype.processDetail = function(A) {
        var C = A.inputData;
        A.dataGroup = !G.isArray(C)
    }, D.prototype = new a, D.prototype.constructor = D, D.prototype.processDetail = function(A) { A.dataGroup ? A.dataGroupHandler.createFakeData() : A.singleDataHandler.createFakeData() }, V.prototype = new a, V.prototype.constructor = V, V.prototype.processDetail = function(A) { A.dataGroup ? A.dataGroupHandler.createMentionedCountries() : A.singleDataHandler.createMentionedCountries() }, P.prototype = new a, P.prototype.constructor = P, P.prototype.processDetail = function(A) { A.dataGroup ? A.dataGroupHandler.createGeometry() : A.singleDataHandler.createGeometry() }, q.prototype = new a, q.prototype.constructor = q, q.prototype.processDetail = function(A) { A.dataGroup ? A.dataGroupHandler.flattenData() : A.singleDataHandler.flattenData() }, Q.prototype = new a, Q.prototype.constructor = Q, Q.prototype.processDetail = function(A) { A.dataGroup ? A.dataGroupHandler.dumpData() : A.singleDataHandler.dumpData() };
    var k = function() {
        function A() {
            var A = new l,
                C = new D,
                g = new V,
                I = new Q,
                r = new P,
                o = new q;
            return A.setSuccessor(g), g.setSuccessor(C), C.setSuccessor(o), o.setSuccessor(r), r.setSuccessor(I), A
        }
        return { getProcessorChain: A }
    }();
    return A.Controller = O, A
}({});